<?php
/* vim: set expandtab tabstop=4 shiftwidth=4: */

/**
 * PHP version 5
 *
 * Copyright (c) 2008 KUBO Atsuhiro <iteman@users.sourceforge.net>,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @package    Piece_ORM
 * @copyright  2008 KUBO Atsuhiro <iteman@users.sourceforge.net>
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License (revised)
 * @version    SVN: $Id$
 * @since      File available since Release 2.0.0dev1
 */

namespace Piece::ORM::Mapper::Parser;

use Piece::ORM::Mapper::Parser::MapperParser;
use Piece::ORM::Exception;

// {{{ Piece::ORM::Mapper::Parser::MapperLexer

/**
 * @package    Piece_ORM
 * @copyright  2008 KUBO Atsuhiro <iteman@users.sourceforge.net>
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License (revised)
 * @version    Release: @package_version@
 * @since      Class available since Release 2.0.0dev1
 */
class MapperLexer
{
    public $token;
    public $value;
    public $line;

    private $_input;
    private $_counter;
    private $_debug = true;
    private $_string;

    function __construct($input)
    {
        $this->_input = $input;
        $this->_counter = 0;
        $this->line = 1;
    }

    /*
     * Lines below are automatically generated by PHP_LexerGenerator - DO NOT EDIT
     */

/*!lex2php
%input $this->_input
%counter $this->_counter
%token $this->token
%value $this->value
%line $this->line
ID = /[a-zA-Z_][a-zA-Z_0-9]*/
WS = /[ \t\r\n]+/
STRING = /\"[^\["\\]+\"/
LCURLY = "{"
RCURLY = "}"
METHOD = "method"
QUERY = "query"
ORDER_BY = "orderBy"
ASSOCIATION = "association"
TABLE = "table"
ASSOCIATION_TYPE = "type"
PROPERTY = "property"
COLUMN = "column"
THROUGH = "through"
REFERENCED_COLUMN = "referencedColumn"
INVERSE_COLUMN = "inverseColumn"
SL_COMMENT = !//[^\n\r]*\r?\n!
ML_COMMENT = !/\*[^*]*\*+([^*/][^*]*\*+)*/!
*/
/*!lex2php
%statename INITIAL

METHOD {
    if ($this->_debug) echo "found METHOD [ {$this->value} ]\n";
    $this->token = MapperParser::METHOD;
}

QUERY {
    if ($this->_debug) echo "found QUERY [ {$this->value} ]\n";
    $this->token = MapperParser::QUERY;
}

ORDER_BY {
    if ($this->_debug) echo "found ORDER_BY [ {$this->value} ]\n";
    $this->token = MapperParser::ORDER_BY;
}

ASSOCIATION {
    if ($this->_debug) echo "found ASSOCIATION [ {$this->value} ]\n";
    $this->token = MapperParser::ASSOCIATION;
}

TABLE {
    if ($this->_debug) echo "found TABLE [ {$this->value} ]\n";
    $this->token = MapperParser::TABLE;
}

ASSOCIATION_TYPE {
    if ($this->_debug) echo "found ASSOCIATION_TYPE [ {$this->value} ]\n";
    $this->token = MapperParser::ASSOCIATION_TYPE;
}

PROPERTY {
    if ($this->_debug) echo "found PROPERTY [ {$this->value} ]\n";
    $this->token = MapperParser::PROPERTY;
}

COLUMN {
    if ($this->_debug) echo "found COLUMN [ {$this->value} ]\n";
    $this->token = MapperParser::COLUMN;
}

THROUGH {
    if ($this->_debug) echo "found THROUGH [ {$this->value} ]\n";
    $this->token = MapperParser::THROUGH;
}

REFERENCED_COLUMN {
    if ($this->_debug) echo "found REFERENCED_COLUMN [ {$this->value} ]\n";
    $this->token = MapperParser::REFERENCED_COLUMN;
}

INVERSE_COLUMN {
    if ($this->_debug) echo "found INVERSE_COLUMN [ {$this->value} ]\n";
    $this->token = MapperParser::INVERSE_COLUMN;
}

ID {
    if ($this->_debug) echo "found ID [ {$this->value} ]\n";
    $this->token = MapperParser::ID;
}

LCURLY {
    if ($this->_debug) echo "found LCURLY [ {$this->value} ]\n";
    $this->token = MapperParser::LCURLY;
}

RCURLY {
    if ($this->_debug) echo "found RCURLY [ {$this->value} ]\n";
    $this->token = MapperParser::RCURLY;
}

WS {
    return false;
}

STRING {
    if ($this->_debug) echo "found STRING [ {$this->value} ]\n";
    $this->token = MapperParser::STRING;
}

SL_COMMENT {
    if ($this->_debug) echo "found SL_COMMENT [ {$this->value} ]\n";
    return false;           
}

ML_COMMENT {
    if ($this->_debug) echo "found ML_COMMENT [ {$this->value} ]\n";
    return false;
}
*/
}
